"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _performRequest = _interopRequireDefault(require("./perform-request"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _default = function _default(endpoint, options, fields, apiService) {
  if (!endpoint) {
    return Promise.reject(new Error('No API endpoint provided'));
  }

  var url = "".concat(apiService.url, "/").concat(endpoint, "/");

  if (options) {
    if (options.limit && options.limit > 50) {
      url = "".concat(apiService.url, "/pro/").concat(endpoint, "/");
    }

    url = Object.keys(options).reduce(function (url, parameter) {
      var _url$options;

      var parameterValue = options[parameter];

      switch (parameter) {
        case 'filters':
          (_url$options = url.options).push.apply(_url$options, _toConsumableArray(Object.keys(parameterValue).reduce(function (optionUrls, filter) {
            var splitFilter = filter.split('-').join('][');
            optionUrls.push("filter[".concat(splitFilter, "]=").concat(parameterValue[filter]));
            return optionUrls;
          }, [])));

          break;

        case 'ids':
          url.baseUrl += parameterValue.join(',');
          break;

        case 'expand':
          url.options.push("expand=".concat(parameterValue.join(',')));
          break;

        case 'endpoint':
          {
            url.baseUrl += "".concat(parameterValue, "/");
            break;
          }

        case 'token':
          {
            apiService.token = parameterValue;
            break;
          }

        default:
          url.options.push("".concat(parameter, "=").concat(parameterValue));
      }

      return url;
    }, {
      baseUrl: url,
      options: []
    });

    if (fields) {
      url.options.push("fields=".concat(fields.join(',')));
    }

    if (url.options.length) {
      url = "".concat(url.baseUrl, "?").concat(url.options.join('&'));
    } else {
      url = url.baseUrl;
    }
  }

  return (0, _performRequest.default)(url, apiService);
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2pzL3JlcXVlc3QtZW5kcG9pbnQuanMiXSwibmFtZXMiOlsiZW5kcG9pbnQiLCJvcHRpb25zIiwiZmllbGRzIiwiYXBpU2VydmljZSIsIlByb21pc2UiLCJyZWplY3QiLCJFcnJvciIsInVybCIsImxpbWl0IiwiT2JqZWN0Iiwia2V5cyIsInJlZHVjZSIsInBhcmFtZXRlciIsInBhcmFtZXRlclZhbHVlIiwicHVzaCIsIm9wdGlvblVybHMiLCJmaWx0ZXIiLCJzcGxpdEZpbHRlciIsInNwbGl0Iiwiam9pbiIsImJhc2VVcmwiLCJ0b2tlbiIsImxlbmd0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Ozs7ZUFZZSxrQkFBQ0EsUUFBRCxFQUFXQyxPQUFYLEVBQW9CQyxNQUFwQixFQUE0QkMsVUFBNUIsRUFBMkM7QUFDdEQsTUFBSSxDQUFDSCxRQUFMLEVBQWU7QUFDWCxXQUFPSSxRQUFRQyxNQUFSLENBQWUsSUFBSUMsS0FBSixDQUFVLDBCQUFWLENBQWYsQ0FBUDtBQUNIOztBQUVELE1BQUlDLGdCQUFTSixXQUFXSSxHQUFwQixjQUEyQlAsUUFBM0IsTUFBSjs7QUFFQSxNQUFJQyxPQUFKLEVBQWE7QUFDVCxRQUFJQSxRQUFRTyxLQUFSLElBQWlCUCxRQUFRTyxLQUFSLEdBQWdCLEVBQXJDLEVBQXlDO0FBQ3JDRCxzQkFBU0osV0FBV0ksR0FBcEIsa0JBQStCUCxRQUEvQjtBQUNIOztBQUNETyxVQUFNRSxPQUFPQyxJQUFQLENBQVlULE9BQVosRUFBcUJVLE1BQXJCLENBQTRCLFVBQUNKLEdBQUQsRUFBTUssU0FBTixFQUFvQjtBQUFBOztBQUNsRCxVQUFNQyxpQkFBaUJaLFFBQVFXLFNBQVIsQ0FBdkI7O0FBRUEsY0FBUUEsU0FBUjtBQUNJLGFBQUssU0FBTDtBQUNJLDhCQUFJWCxPQUFKLEVBQVlhLElBQVosd0NBQW9CTCxPQUFPQyxJQUFQLENBQVlHLGNBQVosRUFBNEJGLE1BQTVCLENBQW1DLFVBQUNJLFVBQUQsRUFBYUMsTUFBYixFQUF3QjtBQUMzRSxnQkFBTUMsY0FBY0QsT0FBT0UsS0FBUCxDQUFhLEdBQWIsRUFBa0JDLElBQWxCLENBQXVCLElBQXZCLENBQXBCO0FBRUFKLHVCQUFXRCxJQUFYLGtCQUEwQkcsV0FBMUIsZUFBMENKLGVBQWVHLE1BQWYsQ0FBMUM7QUFDQSxtQkFBT0QsVUFBUDtBQUNILFdBTG1CLEVBS2pCLEVBTGlCLENBQXBCOztBQU1BOztBQUVKLGFBQUssS0FBTDtBQUNJUixjQUFJYSxPQUFKLElBQWVQLGVBQWVNLElBQWYsQ0FBb0IsR0FBcEIsQ0FBZjtBQUNBOztBQUVKLGFBQUssUUFBTDtBQUNJWixjQUFJTixPQUFKLENBQVlhLElBQVosa0JBQTJCRCxlQUFlTSxJQUFmLENBQW9CLEdBQXBCLENBQTNCO0FBQ0E7O0FBRUosYUFBSyxVQUFMO0FBQWlCO0FBQ2JaLGdCQUFJYSxPQUFKLGNBQWtCUCxjQUFsQjtBQUNBO0FBQ0g7O0FBRUQsYUFBSyxPQUFMO0FBQWM7QUFDVlYsdUJBQVdrQixLQUFYLEdBQW1CUixjQUFuQjtBQUNBO0FBQ0g7O0FBRUQ7QUFDSU4sY0FBSU4sT0FBSixDQUFZYSxJQUFaLFdBQW9CRixTQUFwQixjQUFpQ0MsY0FBakM7QUE3QlI7O0FBZ0NBLGFBQU9OLEdBQVA7QUFDSCxLQXBDSyxFQW9DSDtBQUNDYSxlQUFTYixHQURWO0FBRUNOLGVBQVM7QUFGVixLQXBDRyxDQUFOOztBQXlDQSxRQUFJQyxNQUFKLEVBQVk7QUFDUkssVUFBSU4sT0FBSixDQUFZYSxJQUFaLGtCQUEyQlosT0FBT2lCLElBQVAsQ0FBWSxHQUFaLENBQTNCO0FBQ0g7O0FBRUQsUUFBSVosSUFBSU4sT0FBSixDQUFZcUIsTUFBaEIsRUFBd0I7QUFDcEJmLHNCQUFTQSxJQUFJYSxPQUFiLGNBQXdCYixJQUFJTixPQUFKLENBQVlrQixJQUFaLENBQWlCLEdBQWpCLENBQXhCO0FBQ0gsS0FGRCxNQUVPO0FBQ0haLFlBQU1BLElBQUlhLE9BQVY7QUFDSDtBQUNKOztBQUVELFNBQU8sNkJBQWViLEdBQWYsRUFBb0JKLFVBQXBCLENBQVA7QUFDSCxDIiwiZmlsZSI6InJlcXVlc3QtZW5kcG9pbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGVyZm9ybVJlcXVlc3QgZnJvbSAnLi9wZXJmb3JtLXJlcXVlc3QnO1xuXG4vKipcbiAqIENvbXBvc2VzIGFuZCBzZW5kcyBhbiBBUEkgcmVxdWVzdCBVUkwgYmFzZWQgb24gcHJvdmlkZWQgZmllbGRzIGFuZCBvcHRpb25zLlxuICogQGFyZyB7c3RyaW5nfSBlbmRwb2ludFxuICogQGFyZyB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBhcmcge0FycmF5fSBbZmllbGRzXVxuICogQGFyZyB7b2JqZWN0fSBbYXBpU2VydmljZV1cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59XG4gKiBAZXhhbXBsZVxuICogcmVxdWVzdEVuZHBvaW50KCdleGFtcGxlJywgeyBmaWVsZHM6ICcqJywgbGltaXQ6IDEwIH0sIFsnaWQnLCAnbmFtZSddLCAnZXhhbXBsZS1hcGkta2V5LTEyMycpLnRoZW4oY29uc29sZS5sb2cpXG4gKi9cbmV4cG9ydCBkZWZhdWx0IChlbmRwb2ludCwgb3B0aW9ucywgZmllbGRzLCBhcGlTZXJ2aWNlKSA9PiB7XG4gICAgaWYgKCFlbmRwb2ludCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdObyBBUEkgZW5kcG9pbnQgcHJvdmlkZWQnKSk7XG4gICAgfVxuXG4gICAgbGV0IHVybCA9IGAke2FwaVNlcnZpY2UudXJsfS8ke2VuZHBvaW50fS9gO1xuXG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMubGltaXQgJiYgb3B0aW9ucy5saW1pdCA+IDUwKSB7XG4gICAgICAgICAgICB1cmwgPSBgJHthcGlTZXJ2aWNlLnVybH0vcHJvLyR7ZW5kcG9pbnR9L2A7XG4gICAgICAgIH1cbiAgICAgICAgdXJsID0gT2JqZWN0LmtleXMob3B0aW9ucykucmVkdWNlKCh1cmwsIHBhcmFtZXRlcikgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGFyYW1ldGVyVmFsdWUgPSBvcHRpb25zW3BhcmFtZXRlcl07XG5cbiAgICAgICAgICAgIHN3aXRjaCAocGFyYW1ldGVyKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZmlsdGVycyc6XG4gICAgICAgICAgICAgICAgICAgIHVybC5vcHRpb25zLnB1c2goLi4uT2JqZWN0LmtleXMocGFyYW1ldGVyVmFsdWUpLnJlZHVjZSgob3B0aW9uVXJscywgZmlsdGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzcGxpdEZpbHRlciA9IGZpbHRlci5zcGxpdCgnLScpLmpvaW4oJ11bJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvblVybHMucHVzaChgZmlsdGVyWyR7c3BsaXRGaWx0ZXJ9XT0ke3BhcmFtZXRlclZhbHVlW2ZpbHRlcl19YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9uVXJscztcbiAgICAgICAgICAgICAgICAgICAgfSwgW10pKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdpZHMnOlxuICAgICAgICAgICAgICAgICAgICB1cmwuYmFzZVVybCArPSBwYXJhbWV0ZXJWYWx1ZS5qb2luKCcsJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnZXhwYW5kJzpcbiAgICAgICAgICAgICAgICAgICAgdXJsLm9wdGlvbnMucHVzaChgZXhwYW5kPSR7cGFyYW1ldGVyVmFsdWUuam9pbignLCcpfWApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2VuZHBvaW50Jzoge1xuICAgICAgICAgICAgICAgICAgICB1cmwuYmFzZVVybCArPSBgJHtwYXJhbWV0ZXJWYWx1ZX0vYDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2FzZSAndG9rZW4nOiB7XG4gICAgICAgICAgICAgICAgICAgIGFwaVNlcnZpY2UudG9rZW4gPSBwYXJhbWV0ZXJWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdXJsLm9wdGlvbnMucHVzaChgJHtwYXJhbWV0ZXJ9PSR7cGFyYW1ldGVyVmFsdWV9YCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB1cmw7XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGJhc2VVcmw6IHVybCxcbiAgICAgICAgICAgIG9wdGlvbnM6IFtdXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChmaWVsZHMpIHtcbiAgICAgICAgICAgIHVybC5vcHRpb25zLnB1c2goYGZpZWxkcz0ke2ZpZWxkcy5qb2luKCcsJyl9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXJsLm9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB1cmwgPSBgJHt1cmwuYmFzZVVybH0/JHt1cmwub3B0aW9ucy5qb2luKCcmJyl9YDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVybCA9IHVybC5iYXNlVXJsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHBlcmZvcm1SZXF1ZXN0KHVybCwgYXBpU2VydmljZSk7XG59O1xuIl19