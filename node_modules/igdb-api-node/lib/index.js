"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "config", {
  enumerable: true,
  get: function get() {
    return _configuration.default;
  }
});
exports.default = void 0;

var _configuration = _interopRequireDefault(require("../configuration"));

var _endpoints = _interopRequireDefault(require("./endpoints"));

var _getImage = _interopRequireDefault(require("./get-image"));

var _scrollAll = _interopRequireDefault(require("./scroll-all"));

var _tagNumber = _interopRequireDefault(require("./tag-number"));

var _parseEndpoint = _interopRequireDefault(require("./parse-endpoint"));

var _parsePrivateEndpoint = _interopRequireDefault(require("./parse-private-endpoint"));

var _performRequest = _interopRequireDefault(require("./perform-request"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function _default(apiKey) {
  var apiService = _configuration.default.threeScale;
  apiService.key = apiKey || process.env.IGDB_API_KEY || process.env['3scaleKey'] || process.env.mashapeKey || global.IGDB_API_KEY || global['3scaleKey'] || global.mashapeKey;
  return _endpoints.default.reduce(function (endpointObj, endpoint) {
    endpointObj[endpoint] = (0, _parseEndpoint.default)(endpoint, apiService);
    return endpointObj;
  }, {
    private: (0, _parsePrivateEndpoint.default)('private', apiService),
    image: _getImage.default,
    tagNumber: _tagNumber.default,
    scroll: function scroll(url) {
      return (0, _performRequest.default)("".concat(apiService.url).concat(url), apiService);
    },
    scrollAll: function scrollAll(url, options) {
      return (0, _scrollAll.default)(url, options, apiService, _performRequest.default);
    }
  });
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2pzL2luZGV4LmpzIl0sIm5hbWVzIjpbImFwaVNlcnZpY2UiLCJ0aHJlZVNjYWxlIiwia2V5IiwiYXBpS2V5IiwicHJvY2VzcyIsImVudiIsIklHREJfQVBJX0tFWSIsIm1hc2hhcGVLZXkiLCJnbG9iYWwiLCJyZWR1Y2UiLCJlbmRwb2ludE9iaiIsImVuZHBvaW50IiwicHJpdmF0ZSIsImltYWdlIiwidGFnTnVtYmVyIiwic2Nyb2xsIiwidXJsIiwic2Nyb2xsQWxsIiwib3B0aW9ucyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O2VBUWUsMEJBQVU7QUFDckIsTUFBTUEsYUFBYSx1QkFBT0MsVUFBMUI7QUFFQUQsYUFBV0UsR0FBWCxHQUFpQkMsVUFBVUMsUUFBUUMsR0FBUixDQUFZQyxZQUF0QixJQUFzQ0YsUUFBUUMsR0FBUixDQUFZLFdBQVosQ0FBdEMsSUFBa0VELFFBQVFDLEdBQVIsQ0FBWUUsVUFBOUUsSUFBNEZDLE9BQU9GLFlBQW5HLElBQW1IRSxPQUFPLFdBQVAsQ0FBbkgsSUFBMElBLE9BQU9ELFVBQWxLO0FBRUEsU0FBTyxtQkFBVUUsTUFBVixDQUFpQixVQUFDQyxXQUFELEVBQWNDLFFBQWQsRUFBMkI7QUFDL0NELGdCQUFZQyxRQUFaLElBQXdCLDRCQUFjQSxRQUFkLEVBQXdCWCxVQUF4QixDQUF4QjtBQUNBLFdBQU9VLFdBQVA7QUFDSCxHQUhNLEVBR0o7QUFDQ0UsYUFBUyxtQ0FBcUIsU0FBckIsRUFBZ0NaLFVBQWhDLENBRFY7QUFFQ2EsNEJBRkQ7QUFHQ0MsaUNBSEQ7QUFJQ0MsWUFBUTtBQUFBLGFBQU8sdUNBQWtCZixXQUFXZ0IsR0FBN0IsU0FBbUNBLEdBQW5DLEdBQTBDaEIsVUFBMUMsQ0FBUDtBQUFBLEtBSlQ7QUFLQ2lCLGVBQVcsbUJBQUNELEdBQUQsRUFBTUUsT0FBTjtBQUFBLGFBQWtCLHdCQUFhRixHQUFiLEVBQWtCRSxPQUFsQixFQUEyQmxCLFVBQTNCLDBCQUFsQjtBQUFBO0FBTFosR0FISSxDQUFQO0FBVUgsQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCBuby1wcm9jZXNzLWVudjogMCAqL1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuLi9jb25maWd1cmF0aW9uJztcbmltcG9ydCBlbmRwb2ludHMgZnJvbSAnLi9lbmRwb2ludHMnO1xuaW1wb3J0IGdldEltYWdlIGZyb20gJy4vZ2V0LWltYWdlJztcbmltcG9ydCBnZXRTY3JvbGxBbGwgZnJvbSAnLi9zY3JvbGwtYWxsJztcbmltcG9ydCBnZXRUYWdOdW1iZXIgZnJvbSAnLi90YWctbnVtYmVyJztcbmltcG9ydCBwYXJzZUVuZHBvaW50IGZyb20gJy4vcGFyc2UtZW5kcG9pbnQnO1xuaW1wb3J0IHBhcnNlUHJpdmF0ZUVuZHBvaW50IGZyb20gJy4vcGFyc2UtcHJpdmF0ZS1lbmRwb2ludCc7XG5pbXBvcnQgcGVyZm9ybVJlcXVlc3QgZnJvbSAnLi9wZXJmb3JtLXJlcXVlc3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgdGhlIElHREIgQVBJIG9iamVjdCwgcG9wdWxhdGVkIHdpdGggbWV0aG9kcyBmb3IgYWxsIGRlZmluZWQgZW5kcG9pbnRzLlxuICogQGFyZyB7c3RyaW5nfSBbYXBpS2V5XVxuICogQGFyZyB7Ym9vbH0gW3N0YWdpbmddXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5leHBvcnQgZGVmYXVsdCBhcGlLZXkgPT4ge1xuICAgIGNvbnN0IGFwaVNlcnZpY2UgPSBjb25maWcudGhyZWVTY2FsZTtcblxuICAgIGFwaVNlcnZpY2Uua2V5ID0gYXBpS2V5IHx8IHByb2Nlc3MuZW52LklHREJfQVBJX0tFWSB8fCBwcm9jZXNzLmVudlsnM3NjYWxlS2V5J10gfHwgcHJvY2Vzcy5lbnYubWFzaGFwZUtleSB8fCBnbG9iYWwuSUdEQl9BUElfS0VZIHx8IGdsb2JhbFsnM3NjYWxlS2V5J10gfHwgZ2xvYmFsLm1hc2hhcGVLZXk7XG5cbiAgICByZXR1cm4gZW5kcG9pbnRzLnJlZHVjZSgoZW5kcG9pbnRPYmosIGVuZHBvaW50KSA9PiB7XG4gICAgICAgIGVuZHBvaW50T2JqW2VuZHBvaW50XSA9IHBhcnNlRW5kcG9pbnQoZW5kcG9pbnQsIGFwaVNlcnZpY2UpO1xuICAgICAgICByZXR1cm4gZW5kcG9pbnRPYmo7XG4gICAgfSwge1xuICAgICAgICBwcml2YXRlOiBwYXJzZVByaXZhdGVFbmRwb2ludCgncHJpdmF0ZScsIGFwaVNlcnZpY2UpLFxuICAgICAgICBpbWFnZTogZ2V0SW1hZ2UsXG4gICAgICAgIHRhZ051bWJlcjogZ2V0VGFnTnVtYmVyLFxuICAgICAgICBzY3JvbGw6IHVybCA9PiBwZXJmb3JtUmVxdWVzdChgJHthcGlTZXJ2aWNlLnVybH0ke3VybH1gLCBhcGlTZXJ2aWNlKSxcbiAgICAgICAgc2Nyb2xsQWxsOiAodXJsLCBvcHRpb25zKSA9PiBnZXRTY3JvbGxBbGwodXJsLCBvcHRpb25zLCBhcGlTZXJ2aWNlLCBwZXJmb3JtUmVxdWVzdClcbiAgICB9KTtcbn07XG5cbmV4cG9ydCB7XG4gICAgY29uZmlnXG59O1xuIl19